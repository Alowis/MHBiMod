plot(u,xlim=c(0,60),ylim=c(0,300))
points(cl1,col=2,type="o")
points(cl2,col=3,type="o")
points(cl3,col=4,type="o")
cl<-rbind(cl1,cl2,cl3)
cl<-round(cl,8)
cl<-cl[order(cl[,1],-cl[,2]),]
cl[,1]<-jitter(cl[,1])
if(length(cl[,1])<102){
repeat{
mirror<-cl[c(length(cl[,1]):1),]
cl<-rbind(cl,mirror)
if(length(cl[,1])>=102) break
}
cl<-round(cl,8)
cl<-cl[order(cl[,1],-cl[,2]),]
cl[,1]<-jitter(cl[,1])
}
cli<-digit.curves.p(start=c(cl[1,1],cl[1,2]), as.matrix(cl), nPoints=98, closed = FALSE)
cli<-densicurvcop(cli,o)
clines<-c(clines,list(cli))
}
cl1<-curve.funct.b(pxfp,pyfp,u1b,u2b,u,pos="l",pobje=upobj,ng=100,inter=interh)
cl1<-curve.funct.b(pp[,1],pp[,2],uu[,1],uu[,2],u,pos="l",pobje=upobj,ng=100,inter=interh)
cl1<-curve.funct.b(pp[,1],pp[,2],uu[,1],uu[,2],pos="l",pobje=upobj,ng=100,inter=interh)
curve.funct.b<-function(pxf,pyf,mar1,mar2,pos,pobje,ng=100,inter="comb"){
if(pos=="l"){
xmin=0
xmax=0.99
ymin=0.99
ymax=1
}
if(pos=="m"){
xmin=0.98
xmax=1
ymin=0.98
ymax=1
}
if(pos=="r"){
xmin=0.99
xmax=1
ymin=0
ymax=0.99
}
ngx=10000
godx<-spline(pxf,mar1, n = ngx, method = "natural",
xmin = xmin, xmax = xmax, ties = mean)
gody<-spline(pyf,mar2, n = ngx, method = "natural",
xmin = ymin, xmax = ymax, ties = mean)
coxi<-approx(godx$y,godx$x, n = ng, method = "linear",
yleft = 0, yright = 1, ties = mean)
coyi<-approx(gody$y,gody$x, n = ng, method = "linear",
yleft = 0, yright = 1, ties = mean)
plot(coxi$x,coxi$y)
godx<-coxi$y
gody<-coyi$y
coxi<-coxi$x
coyi<-coyi$x
repeat{
idx<-which(diff(coxi)<=0)
# print("cl")
if(length(idx)<1){
break
}
coxi[idx+1]=coxi[idx]+0.001
}
repeat{
idy<-which(diff(coyi)<=0)
if(length(idy)<1){
break
}
coyi[idy+1]=coyi[idy]+0.001
}
acp3<-matrix(NA, nrow = ng, ncol = ng)
for (k in 1:length(gody)){
for (j in 1:length(godx)){
if (inter=="comb"){
acp3[j,k]=surfuncCOP(godx[j], gody[k], cop=coco, para=c1)}
if (inter=="casc"){
acp3[j,k]= surfuncCOP(godx[j], gody[k], cop=coco, para=c1)/(1-godx[j])}
}
}
grid <- expand.grid(lon=godx, lat=gody)
levelplot(acp3 ~ lon * lat, data=grid, cuts=20, pretty=T)
cl2<-contourLines(coxi,coyi, acp3, levels = pobje)
if(length(cl2)>0){
cl2<-as.matrix(data.frame(cl2[[1]]$x,cl2[[1]]$y))} else{cl2<-NA}
}
source('~/Package_mobirep/mobirep/R/level_curves.R')
cl1<-curve.funct.b(pp[,1],pp[,2],uu[,1],uu[,2],pos="l",pobje=upobj,ng=100,inter=interh)
cl2<-curve.funct.b(pp[,1],pp[,2],uu[,1],uu[,2],pos="m",pobje=upobj,ng=100,inter=interh)
plot(u,xlim=c(0,60),ylim=c(0,300))
points(cl1,col=2,type="o")
points(cl2,col=3,type="o")
points(cl3,col=4,type="o")
cl<-rbind(cl1,cl2,cl3)
cl<-round(cl,8)
cl3<-curve.funct.b(pp[,1],pp[,2],uu[,1],uu[,2],pos="r",pobje=upobj,ng=100,inter=interh)
plot(u,xlim=c(0,60),ylim=c(0,300))
points(cl1,col=2,type="o")
points(cl2,col=3,type="o")
points(cl3,col=4,type="o")
cl<-rbind(cl1,cl2,cl3)
cl<-round(cl,8)
cl<-cl[order(cl[,1],-cl[,2]),]
cl[,1]<-jitter(cl[,1])
if(length(cl[,1])<102){
repeat{
mirror<-cl[c(length(cl[,1]):1),]
cl<-rbind(cl,mirror)
if(length(cl[,1])>=102) break
}
cl<-round(cl,8)
cl<-cl[order(cl[,1],-cl[,2]),]
cl[,1]<-jitter(cl[,1])
}
cli<-digit.curves.p(start=c(cl[1,1],cl[1,2]), as.matrix(cl), nPoints=98, closed = FALSE)
cli<-densicurvcop(cli,o)
clines<-c(clines,list(cli))
cli<-densi.curv.cop(cli,o)
cli<-densi.curv.cop(cli,o,kk[,1],kk[,2])
source('~/Package_mobirep/mobirep/R/supplement.funct.R')
cli<-densi.curv.cop(cli,o,kk[,1],kk[,2])
clines<-c(clines,list(cli))
clines<-list()
for (v in 1:4){
if( v!=4 | galsh==F){
copulas[[v]]@copula
c1<-copulas[[v]]@estimate
}
if( v==1){o<-gumbelCopula(c1,dim=2)}
if( v==2){o1<-copNormal(parameters=c1,dim=2)
o<-normalCopula(c1,dim=2)}
if( v==3)o<-fgmCopula(c1,dim=2)
if( v==4 & galsh==F)o<-galambosCopula(c1)
if( v==4 & galsh==T)o<-indepCopula(dim=2)
coco<-copbask[[v]]
cl1<-curve.funct.b(pp[,1],pp[,2],uu[,1],uu[,2],pos="l",pobje=upobj,ng=100,inter=interh)
cl2<-curve.funct.b(pp[,1],pp[,2],uu[,1],uu[,2],pos="m",pobje=upobj,ng=100,inter=interh)
cl3<-curve.funct.b(pp[,1],pp[,2],uu[,1],uu[,2],pos="r",pobje=upobj,ng=100,inter=interh)
plot(u,xlim=c(0,60),ylim=c(0,300))
points(cl1,col=2,type="o")
points(cl2,col=3,type="o")
points(cl3,col=4,type="o")
cl<-rbind(cl1,cl2,cl3)
cl<-round(cl,8)
cl<-cl[order(cl[,1],-cl[,2]),]
cl[,1]<-jitter(cl[,1])
if(length(cl[,1])<102){
repeat{
mirror<-cl[c(length(cl[,1]):1),]
cl<-rbind(cl,mirror)
if(length(cl[,1])>=102) break
}
cl<-round(cl,8)
cl<-cl[order(cl[,1],-cl[,2]),]
cl[,1]<-jitter(cl[,1])
}
cli<-digit.curves.p(start=c(cl[1,1],cl[1,2]), as.matrix(cl), nPoints=98, closed = FALSE)
cli<-densi.curv.cop(cli,o,kk[,1],kk[,2])
clines<-c(clines,list(cli))
}
names(clines)=c("gumbel","normal","fgm","galambos")
R CMD check --as-cran mobirep_0.2.tar.gz
getwd()
setwd(C:/Users/Alois/Documents/Package_mobirep)
setwd("C:/Users/Alois/Documents/Package_mobirep")
setwd("C:\UsersAlois\Documents\Package_mobirep")
setwd("C:/Users/Alois/Documents/Package_mobirep")
getwd()
setwd("C:/Users/Alois/Documents/Package_mobirep")
install.packages("tinytex")
tinytex::install_tinytex()
tinytex::install_tinytex()
remove.packages("xfun", lib="~/R/win-library/4.0")
install.packages("xfun")
install.packages("xfun")
tinytex::install_tinytex()
install.packages("xfun")
install.packages("xfun")
tinytex::install_tinytex()
getwd
getwd()
setwd("C:/Users/Alois/Documents/Package_mobirep")
rm -Rf C:/Users/Alois/AppData/Local/Temp/RtmpkBzlHA/Rd2pdf3bb056b9e62
remove.packages("mobirep", lib="~/R/win-library/4.0")
library(mobirep)
install.packages("qtl")
install.packages("qpdf")
library(qtl)
library(qpdf)
data(porto)
data(porto)
tr1=0.9
tr2=0.9
fire01meantemp=na.omit(fire01meantemp)
u=fire01meantemp
marmod=Margins.mod(tr1,tr2,u=fire01meantemp)
pp=marg$uvar_ext
uu=marg$val_ext
cop<-gumbelCopula(c1,dim=2)
upobj=0.001
interh="comb"
cl1<-curve.funct(pxf=pp[,1],pyf=pp[,2],mar1=uu[,1],mar2=uu[,2],pos="l",pobje=upobj,ng=100,inter=interh,coco=cop,c1=c1)
cl2<-curve.funct(pxf=pp[,1],pyf=pp[,2],uu[,1],uu[,2],pos="m",pobje=upobj,ng=100,inter=interh,coco=cop,c1=c1)
cl3<-curve.funct(pxf=pp[,1],pyf=pp[,2],uu[,1],uu[,2],pos="r",pobje=upobj,ng=100,inter=interh,coco=cop,c1=c1)
cl<-rbind(cl1,cl2,cl3)
library(copBasic)
library(copula)
data(porto)
tr1=0.9
tr2=0.9
fire01meantemp=na.omit(fire01meantemp)
u=fire01meantemp
marmod=Margins.mod(tr1,tr2,u=fire01meantemp)
library(mobirep)
marmod=Margins.mod(tr1,tr2,u=fire01meantemp)
pp=marg$uvar_ext
marg=Margins.mod(tr1,tr2,u=fire01meantemp)
pp=marg$uvar_ext
uu=marg$val_ext
cop<-gumbelCopula(c1,dim=2)
cop<-gumbelCopula(0.5,dim=2)
cop<-gumbelCopula(1.5,dim=2)
upobj=0.001
interh="comb"
cl1<-curve.funct(pxf=pp[,1],pyf=pp[,2],mar1=uu[,1],mar2=uu[,2],pos="l",pobje=upobj,ng=100,inter=interh,coco=cop,c1=c1)
cop<-gumbelCopula(1.5,dim=2)
upobj=0.001
interh="comb"
cl1<-curve.funct(pxf=pp[,1],pyf=pp[,2],mar1=uu[,1],mar2=uu[,2],pos="l",pobje=upobj,ng=100,inter=interh,coco=cop,c1=c1)
curve.funct<-function(pxf,pyf,mar1,mar2,pos,pobje,ng=100,inter="comb",coco,c1){
if(logm==TRUE) {
mar1<-log(mar1)
mar2<-log(mar2)
}
if(pos=="l"){
xmin=0
xmax=0.99
ymin=0.99
ymax=1
}
if(pos=="m"){
xmin=0.98
xmax=1
ymin=0.98
ymax=1
}
if(pos=="r"){
xmin=0.99
xmax=1
ymin=0
ymax=0.99
}
ngx=10000
godx<-spline(pxf,mar1, n = ngx, method = "natural",
xmin = xmin, xmax = xmax, ties = mean)
gody<-spline(pyf,mar2, n = ngx, method = "natural",
xmin = ymin, xmax = ymax, ties = mean)
coxi<-approx(godx$y,godx$x, n = ng, method = "linear",
yleft = 0, yright = 1, ties = mean)
coyi<-approx(gody$y,gody$x, n = ng, method = "linear",
yleft = 0, yright = 1, ties = mean)
plot(coxi$x,coxi$y)
godx<-coxi$y
gody<-coyi$y
coxi<-coxi$x
coyi<-coyi$x
repeat{
idx<-which(diff(coxi)<=0)
if(length(idx)<1){
break
}
coxi[idx+1]=coxi[idx]+0.001
}
repeat{
idy<-which(diff(coyi)<=0)
if(length(idy)<1){
break
}
coyi[idy+1]=coyi[idy]+0.001
}
acp3<-matrix(NA, nrow = ng, ncol = ng)
for (k in 1:length(gody)){
for (j in 1:length(godx)){
if (inter=="comb"){
acp3[j,k]=surfuncCOP(godx[j], gody[k], cop=coco, para=c1)}
if (inter=="casc"){
acp3[j,k]= surfuncCOP(godx[j], gody[k], cop=coco, para=c1)/(1-godx[j])}
}
}
grid <- expand.grid(lon=godx, lat=gody)
levelplot(acp3 ~ lon * lat, data=grid, cuts=20, pretty=TRUE)
cl2<-contourLines(coxi,coyi, acp3, levels = pobje)
if(length(cl2)>0){
cl2<-as.matrix(data.frame(cl2[[1]]$x,cl2[[1]]$y))} else{cl2<-NA}
}
cl1<-curve.funct(pxf=pp[,1],pyf=pp[,2],mar1=uu[,1],mar2=uu[,2],pos="l",pobje=upobj,ng=100,inter=interh,coco=cop,c1=c1)
cl1<-curve.funct(pxf=pp[,1],pyf=pp[,2],mar1=uu[,1],mar2=uu[,2],pos="l",pobje=upobj,ng=100,inter=interh,coco=cop,c1=c1,logm=FALSE)
curve.funct<-function(pxf,pyf,mar1,mar2,pos,pobje,ng=100,inter="comb",coco,c1,logm=FALSE){
if(logm==TRUE) {
mar1<-log(mar1)
mar2<-log(mar2)
}
if(pos=="l"){
xmin=0
xmax=0.99
ymin=0.99
ymax=1
}
if(pos=="m"){
xmin=0.98
xmax=1
ymin=0.98
ymax=1
}
if(pos=="r"){
xmin=0.99
xmax=1
ymin=0
ymax=0.99
}
ngx=10000
godx<-spline(pxf,mar1, n = ngx, method = "natural",
xmin = xmin, xmax = xmax, ties = mean)
gody<-spline(pyf,mar2, n = ngx, method = "natural",
xmin = ymin, xmax = ymax, ties = mean)
coxi<-approx(godx$y,godx$x, n = ng, method = "linear",
yleft = 0, yright = 1, ties = mean)
coyi<-approx(gody$y,gody$x, n = ng, method = "linear",
yleft = 0, yright = 1, ties = mean)
plot(coxi$x,coxi$y)
godx<-coxi$y
gody<-coyi$y
coxi<-coxi$x
coyi<-coyi$x
repeat{
idx<-which(diff(coxi)<=0)
if(length(idx)<1){
break
}
coxi[idx+1]=coxi[idx]+0.001
}
repeat{
idy<-which(diff(coyi)<=0)
if(length(idy)<1){
break
}
coyi[idy+1]=coyi[idy]+0.001
}
acp3<-matrix(NA, nrow = ng, ncol = ng)
for (k in 1:length(gody)){
for (j in 1:length(godx)){
if (inter=="comb"){
acp3[j,k]=surfuncCOP(godx[j], gody[k], cop=coco, para=c1)}
if (inter=="casc"){
acp3[j,k]= surfuncCOP(godx[j], gody[k], cop=coco, para=c1)/(1-godx[j])}
}
}
grid <- expand.grid(lon=godx, lat=gody)
levelplot(acp3 ~ lon * lat, data=grid, cuts=20, pretty=TRUE)
cl2<-contourLines(coxi,coyi, acp3, levels = pobje)
if(length(cl2)>0){
cl2<-as.matrix(data.frame(cl2[[1]]$x,cl2[[1]]$y))} else{cl2<-NA}
}
cl1<-curve.funct(pxf=pp[,1],pyf=pp[,2],mar1=uu[,1],mar2=uu[,2],pos="l",pobje=upobj,ng=100,inter=interh,coco=cop,c1=c1,logm=FALSE)
copu<-gumbelCopula(1.5,dim=2)
cl1<-curve.funct(pxf=pp[,1],pyf=pp[,2],mar1=uu[,1],mar2=uu[,2],pos="l",pobje=upobj,ng=100,inter=interh,coco=copu,c1=c1,logm=FALSE)
coco=copu
cl1<-curve.funct(pxf=pp[,1],pyf=pp[,2],mar1=uu[,1],mar2=uu[,2],pos="l",pobje=upobj,ng=100,inter=interh,coco=copu,c1=c1,logm=FALSE)
View(curve.funct)
surfuncCOP
detach("package:copula", unload = TRUE)
cl1<-curve.funct(pxf=pp[,1],pyf=pp[,2],mar1=uu[,1],mar2=uu[,2],pos="l",pobje=upobj,ng=100,inter=interh,coco=copu,c1=c1,logm=FALSE)
interh
copu
c1
c1=1.5
copu<-gumbelCopula(c1,dim=2)
library(copula)
copu<-gumbelCopula(c1,dim=2)
cl1<-curve.funct(pxf=pp[,1],pyf=pp[,2],mar1=uu[,1],mar2=uu[,2],pos="l",pobje=upobj,ng=100,inter=interh,coco=copu,c1=c1,logm=FALSE)
rm(cop)
cl1<-curve.funct(pxf=pp[,1],pyf=pp[,2],mar1=uu[,1],mar2=uu[,2],pos="l",pobje=upobj,ng=100,inter=interh,coco=copu,c1=c1,logm=FALSE)
copu
c1
interh
surfuncCOP()
surfuncCOP
pxf=pp[,1]
pyf=pp[,2]
mar1=uu[,1]
mar2=uu[,2]
pos="l"
pobje=upobj
ng=100
inter=interh
logm=FALSE
coco=copu
if(logm==TRUE) {
mar1<-log(mar1)
mar2<-log(mar2)
}
if(pos=="l"){
xmin=0
xmax=0.99
ymin=0.99
ymax=1
}
if(pos=="m"){
xmin=0.98
xmax=1
ymin=0.98
ymax=1
}
if(pos=="r"){
xmin=0.99
xmax=1
ymin=0
ymax=0.99
}
ngx=10000
godx<-spline(pxf,mar1, n = ngx, method = "natural",
xmin = xmin, xmax = xmax, ties = mean)
gody<-spline(pyf,mar2, n = ngx, method = "natural",
xmin = ymin, xmax = ymax, ties = mean)
coxi<-approx(godx$y,godx$x, n = ng, method = "linear",
yleft = 0, yright = 1, ties = mean)
coyi<-approx(gody$y,gody$x, n = ng, method = "linear",
yleft = 0, yright = 1, ties = mean)
plot(coxi$x,coxi$y)
godx<-coxi$y
gody<-coyi$y
coxi<-coxi$x
coyi<-coyi$x
repeat{
idx<-which(diff(coxi)<=0)
if(length(idx)<1){
break
}
coxi[idx+1]=coxi[idx]+0.001
}
repeat{
idy<-which(diff(coyi)<=0)
if(length(idy)<1){
break
}
coyi[idy+1]=coyi[idy]+0.001
}
acp3<-matrix(NA, nrow = ng, ncol = ng)
for (k in 1:length(gody)){
for (j in 1:length(godx)){
if (inter=="comb"){
acp3[j,k]=surfuncCOP(godx[j], gody[k], cop=coco, para=c1)}
if (inter=="casc"){
acp3[j,k]= surfuncCOP(godx[j], gody[k], cop=coco, para=c1)/(1-godx[j])}
}
}
surfuncCOP(godx[j], gody[k], cop=coco, para=c1)
coco
surfuncCOP?
surfuncCOP()?
?surfuncCOP
copu<-GHcop
cl1<-curve.funct(pxf=pp[,1],pyf=pp[,2],mar1=uu[,1],mar2=uu[,2],pos="l",pobje=upobj,ng=100,inter=interh,coco=copu,c1=c1,logm=FALSE)
library(lattice, lib.loc = "C:/Program Files/R/R-4.0.3/library")
cl1<-curve.funct(pxf=pp[,1],pyf=pp[,2],mar1=uu[,1],mar2=uu[,2],pos="l",pobje=upobj,ng=100,inter=interh,coco=copu,c1=c1,logm=FALSE)
cl2<-curve.funct(pxf=pp[,1],pyf=pp[,2],uu[,1],uu[,2],pos="m",pobje=upobj,ng=100,inter=interh,coco=cop,c1=c1)
cl2<-curve.funct(pxf=pp[,1],pyf=pp[,2],uu[,1],uu[,2],pos="m",pobje=upobj,ng=100,inter=interh,coco=copu,c1=c1)
cl3<-curve.funct(pxf=pp[,1],pyf=pp[,2],uu[,1],uu[,2],pos="r",pobje=upobj,ng=100,inter=interh,coco=copu,c1=c1)
cl<-rbind(cl1,cl2,cl3)
detach("package:mobirep", unload = TRUE)
remove.packages("mobirep", lib="~/R/win-library/4.0")
data(porto)
tr1=0.9
tr2=0.9
fire01meantemp=na.omit(fire01meantemp)
u=fire01meantemp
#Compute uniform margins
marg=Margins.mod(tr1,tr2,u=fire01meantemp)
library(mobirep)
tr1=0.9
tr2=0.9
fire01meantemp=na.omit(fire01meantemp)
u=fire01meantemp
data(porto)
tr1=0.9
tr2=0.9
fire01meantemp=na.omit(fire01meantemp)
u=fire01meantemp
#Compute uniform margins
marg=Margins.mod(tr1,tr2,u=fire01meantemp)
kk=marg$uvar
pp=marg$uvar_ext
uu=marg$val_ext
#Copula parameters
c1=1.5
copu<-copBasic::GHcop
upobj=0.001
interh="comb"
#compute the curve on 3 subdomains
cl1<-curve.funct(pxf=pp[,1],pyf=pp[,2],mar1=uu[,1],mar2=uu[,2],pos="l",
pobje=upobj,ng=100,inter=interh,coco=copu,c1=c1)
cl2<-curve.funct(pxf=pp[,1],pyf=pp[,2],mar1=uu[,1],mar2=uu[,2],pos="m",
pobje=upobj,ng=100,inter=interh,coco=copu,c1=c1)
cl3<-curve.funct(pxf=pp[,1],pyf=pp[,2],mar1=uu[,1],mar2=uu[,2],pos="r",
pobje=upobj,ng=100,inter=interh,coco=copu,c1=c1)
cl<-rbind(cl1,cl2,cl3)
# Homogenization of the number of points
cli<-digit.curves.p(start=c(cl[1,1],cl[1,2]), as.matrix(cl), nPoints=98, closed = FALSE)
# Computes the density along the curve
cli<-densi.curv.cop(lines=cli,copi=copu,pxf=kk[,1],pyf=kk[,2],u=u)
