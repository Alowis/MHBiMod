devtools::use_vignette("introduction")
devtools::use_vignette()
library(usethis)
devtools::use_vignette()
use_vignette()
use_vignette("coucou")
library(MHBiMod)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(MHBiMod)
---
title: "coucou"
output: rmarkdown::html_vignette
vignette: >
%\VignetteIndexEntry{coucou}
%\VignetteEngine{knitr::rmarkdown}
%\VignetteEncoding{UTF-8}
---
```{r, include = FALSE}
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
```
```{r setup}
library(MHBiMod)
```
rmarkdown::render()
rmarkdown::render()
install.packages("markdown")
rmarkdown::render()
devtools::document()
devtools::use_data()
devtools::load_all()
devtools::install_github("Alowis/MHBiMod")
devtools::install_github("Alowis/MHBiMod")
devtools::install_github("Alowis/MHBiMod")
devtools::install_github("Alowis/MHBiMod")
git remote add MHBiMod https://github.com/Alowis/MHBiMod
git remote add MHBiMod https://github.com/Alowis/MHBiMod
git
git push --set-upstream origin master
devtools::load_all()
devtools::install()
library("MHBiMod")
devtools::load_all()
devtools::install()
devtools::document()
devtools::load_all()
devtools::install()
curve.funct<-function(pxf,pyf,mar1,mar2,u,pos,pobje,ng=100,inter="comb"){
if(pos=="l"){
xmin=0
xmax=0.9
ymin=0.99
ymax=1
}
if(pos=="m"){
xmin=0.9
xmax=0.995
ymin=0.9
ymax=.995
}
if(pos=="r"){
xmin=0.99
xmax=1
ymin=0
ymax=.9
}
godx<-spline(pxf,mar1, n = ng, method = "fmm",
xmin = xmin, xmax = xmax, ties = mean)
gody<-spline(pyf,mar2, n = ng, method = "fmm",
xmin = ymin, xmax = ymax, ties = mean)
coxi<-approx(godx$y,godx$x, n = ng, method = "linear",
yleft = 0, yright = 1, ties = mean)
coyi<-approx(gody$y,gody$x, n = ng, method = "linear",
yleft = 0, yright = 1, ties = mean)
plot(coxi$x,coxi$y)
godx<-coxi$y
gody<-coyi$y
coxi<-coxi$x
coyi<-coyi$x
repeat{
idx<-which(diff(coxi)<=0)
print("cl")
if(length(idx)<1){
break
}
coxi[idx+1]=coxi[idx]+0.001
}
repeat{
idy<-which(diff(coyi)<=0)
print("cl")
if(length(idy)<1){
break
}
coyi[idy+1]=coyi[idy]+0.001
}
acp3<-matrix(NA, nrow = ng, ncol = ng)
for (k in 1:length(gody)){
for (j in 1:length(godx)){
if (inter=="comb"){
acp3[j,k]=surfuncCOP(godx[j], gody[k], cop=coco, para=c1)}
if (inter=="casc"){
acp3[j,k]= surfuncCOP(godx[j], gody[k], cop=coco, para=c1)/(1-godx[j])}
}
}
cl2<-contourLines(coxi,coyi, acp3, levels = pobje)
if(length(cl2)>0){
cl2<-as.matrix(data.frame(cl2[[1]]$x,cl2[[1]]$y))} else{cl2<-NA}
}
knitr::include_graphics("diagrams/cran-package.png")
devtools::check()
rm(list = c("curve.funct"))
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::load_all()
devtools::load_all()
devtools::install()
devtools::check()
devtools::check()
devtools::check()
devtools::load_all()
devtools::install()
load("fire01meantemp.Rdata")
data("fire01meantemp.Rdata")
devtools::load_all()
devtools::install()
data(porto)
data(porto)
data(porto)
AnalogSel(fire01meantemp)
AnalogSel(fire01meantemp)
detach("package:mobirep", unload = TRUE)
library(mobirep)
AnalogSel(fire01meantemp)
AnalogSel(fire01meantemp)
library(mobirep)
devtools::load_all()
AnalogSel(fire01meantemp)
library (mobirep)
AnalogSel(fire01meantemp)
Margins.mod()
mobirep::AnalogSel(fire01meantemp)
library(copula)
devtools::install()
devtools::load_all()
library(mobirep)
mobirep::AnalogSel(fire01meantemp)
library(texmex)
mobirep::AnalogSel(fire01meantemp)
devtools::load_all()
devtools::install()
detach("package:texmex", unload = TRUE)
library(texmex)
mobirep::AnalogSel(fire01meantemp)
AnalogSel(fire01meantemp)
detach("package:mobirep", unload = TRUE)
library(mobirep)
AnalogSel(fire01meantemp)
devtools::install()
devtools::load_all()
library(mobirep)
AnalogSel(fire01meantemp)
library(mobirep)
data("porto")
AnalogSel
AnalogSel(fire01meantemp)
library(mobirep)
AnalogSel(jj)
library(mobirep)
devtools::load_all(".")
library(mobirep)
library(mobirep)
devtools::load_all(".")
library(mobirep)
rtools
library(mobirep)
install.packages("learnr")
devtools::load_all(".")
library(mobirep)
?AnalogSel
JT.KDE.ap
?JT.KDE.ap
library(mobirep)
library(mobirep)
library(mobirep)
force(fire01meantemp)
remove.packages("mobirep", lib="~/R/win-library/4.0")
devtools::document()
devtools::document()
library(mobirep)
library(mobirep)
library(mobirep)
remove.packages("mobirep", lib="~/R/win-library/4.0")
devtools::document()
devtools::install(pkg = "mobirep")
devtools::install(reload = TRUE)
devtools::install(.)
devtools::install()
devtools::load_all()
devtools::install()
library(mobirep_0.0.0.9000.tar.gz)
library(mobirep)
?AnalogSel
library(modelr)
detach("package:mobirep", unload = TRUE)
library(mobirep)
detach("package:mobirep", unload = TRUE)
library(mobirep)
detach("package:mobirep", unload = TRUE)
library(mobirep)
detach("package:mobirep", unload = TRUE)
library(mobirep)
library(mobirep)
detach("package:mobirep", unload = TRUE)
library(mobirep)
library(mobirep)
usethis::use_testthat()
devtools::test()
search()
library(mobirep)
force(fire01meantemp)
View(fire01meantemp)
usethis::use_build_ignore()
install.packages(mobirep)
remove.packages("mobirep", lib="~/R/win-library/4.0")
install.packages("mobirep")
install.packages("mobirep")
library(mobirep)
force(fire01meantemp)
remove.packages("mobirep", lib="~/R/win-library/4.0")
devtools::load_all()
library(mobirep)
force(fire01meantemp)
detach("package:mobirep", unload = TRUE)
library(mobirep)
force(fire01meantemp)
detach("package:mobirep", unload = TRUE)
library(mobirep)
devtools::load_all(".")
library(mobirep)
force(pegp3)
force(fire01meantemp)
devtools::install()
detach("package:mobirep", unload = TRUE)
library(mobirep)
remove.packages("mobirep", lib="~/R/win-library/4.0")
library(mobirep)
library(mobirep)
detach("package:mobirep", unload = TRUE)
library(mobirep)
library(mobirep)
detach("package:mobirep", unload = TRUE)
library(mobirep)
devtools::document()
library(mobirep)
library(mobirep)
remove.packages("mobirep", lib="~/R/win-library/4.0")
library(mobirep)
force(Bv.LT.Dep)
force(Margins.mod)
remove.packages("mobirep", lib="~/R/win-library/4.0")
library(mobirep)
library(mobirep)
devtools::document()
remove.packages("mobirep", lib="~/R/win-library/4.0")
library(mobirep)
library(mobirep)
force(curve.funct.b)
# test_check("mobirep")
AnalogSel(dd)
devtools::document()
devtools::document()
remove.packages("mobirep", lib="~/R/win-library/4.0")
library(mobirep)
library(mobirep)
AnalogSel(tg)
force(fire01meantemp)
AnalogSel(fire01meantemp)
data(porto)
AnalogSel(fire01meantemp)
library(mobirep)
data(porto)
AnalogSel(fire01meantemp)
tr1=0.9
tr2=0.9
fire01meantemp=na.omit(fire01meantemp)
blss=Margins.mod(tr1,tr2,u=fire01meantemp)
jtres<-JT.KDE.ap(u2=fire01meantemp,pb=0.01,pobj=upobj,beta=100,vtau=vtau,devplot=F,mar1=u1b,mar2=u2b,px=pxfp,py=pyfp,interh=interh)
devtools::document()
jtres<-JT.KDE.ap(u2=fire01meantemp,pb=0.01,pobj=upobj,beta=100,vtau=vtau,devplot=F,mar1=u1b,mar2=u2b,px=pxfp,py=pyfp,interh=interh)
library(mobirep)
jtres<-JT.KDE.ap(u2=fire01meantemp,pb=0.01,pobj=upobj,beta=100,vtau=vtau,devplot=F,mar1=u1b,mar2=u2b,px=pxfp,py=pyfp,interh=interh)
remove.packages("mobirep", lib="~/R/win-library/4.0")
devtools::install_github("Alowis/mobirep")
library(mobirep)
data(porto)
AnalogSel(fire01meantemp)
tr1=0.9
tr2=0.9
fire01meantemp=na.omit(fire01meantemp)
blss=Margins.mod(tr1,tr2,u=fire01meantemp)
jtres<-JT.KDE.ap(u2=fire01meantemp,pb=0.01,pobj=upobj,beta=100,vtau=vtau,devplot=F,mar1=u1b,mar2=u2b,px=pxfp,py=pyfp,interh=interh)
JT.KDE.ap<-function(u2,pbas ,pobj,beta,vtau,devplot=F,mar1,mar2,px,py,interh=NA){
e1<-seq(0,1.2*max(u2[,1]),length.out=200)
e2<-seq(0,1.2*max(u2[,2]),length.out=200)
evp<-as.data.frame(cbind(e1,e2))
bwaa=expand.grid(e1,e2)
aa<-kcde(u2, gridsize=300,tail.flag = "upper.tail",xmin=c(0,0),xmax=c(1.5*max(u2[,1]),1.5*max(u2[,2])))
lox<-aa$eval.points[[1]]
loy<-aa$eval.points[[2]]
ngx=100000
godx<-approx(mar1,px, n = ngx, method = "linear",
yleft = min(px), yright = max(px))
gody<-approx(mar2,py, n = ngx, method = "linear",
yleft = min(py), yright = max(py))
pxe<-approx(godx$x, godx$y, xout = lox, method = "linear",yleft = min(px),yright = max(px), rule = 1)$y
pye<-approx(gody$x, gody$y, xout = loy, method = "linear",yleft = min(py),yright = max(py), rule = 1)$y
if(devplot==T){
plot(aa,cont = c(0.05,0.1),display="filled.contour" ,col=viridis(10))
}
az<-aa$estimate
wq<-contourLines(lox,loy, az, levels = c(0.7,0.5,0.2,0.1,pbas))
wq0ri<-cbind(wq[[5]]$x,wq[[5]]$y)
var1<-u2[,1]
var2<-u2[,2]
wu<-data.frame(u2)
ovar1<-var1[order(var1)]
rx1<-rank(ovar1)
ovar2<-var2[order(var2)]
rx2<-rank(ovar2)
p01=0.01
p02=0.01
q0=0.92
if(length(which(wq0ri[,1]<0))>0)wq0ri<-wq0ri[-which(wq0ri[,1]<0),]
if(length(which(wq0ri[,2]<0))>0)wq0ri<-wq0ri[-which(wq0ri[,2]<0),]
wqUnitx<- approx(mar1, px, xout = wq0ri[,1], method = "linear",yleft = min(px),yright = max(px), rule = 1)$y
wqUnity<- approx(mar2, py, xout = wq0ri[,2], method = "linear",yleft = min(py),yright = max(py), rule = 1)$y
#Transforming Pbase to Frechet Margins
wqxFrechet<--1/log(wqUnitx)
wqyFrechet<--1/log(wqUnity)
pb<-1-pbas
#Setting up Pobjective
s=pbas/pobj
xFrechet<--1/log(px)
yFrechet<--1/log(py)
ModelHugo_file=paste0(getwd(),"/LF/BveLTDep.R")
source (ModelHugo_file)
if(vtau<0)q0=0.9
qq<-c()
cm<-c()
cq<-c()
ccd<-c()
qc<-.95
rq0<-seq(0.75,0.95,by=0.01)
for(q0 in rq0){
estims<-try(BveLTDep (data= kk,mod.thresh.u = q0,crit.lev.u = qc,sig.lev=0.05,ci.meth='pl',marg.inf=T),silent = T)
qd<-try((estims$par[2]),silent=T)
cd<-try((estims$chiCIs),silent=T)
cc<-try((estims$chi),silent=T)
if(is.numeric(qd)){
qq<-c(qq,qd)
ccd<-c(ccd,cc)
}
if(is.numeric(cd)){
cq<-c(cq,cd)
}
}
plot(ccd)
plot(qq)
sumd<-0
for(i in 1:length(diff(qq))){
sdiff<-diff(qq)[i]
sumd<-c(sumd,sumd[i]+sdiff)}
sh<-which(sumd<=-0.02|sumd>=0.02 )[1]
q0<-rq0[sh-1]
plot(sumd)
estims<-try(BveLTDep (data= kk,mod.thresh.u = q0,crit.lev.u = qc,sig.lev=0.05,ci.meth='se',marg.inf=T),silent = T)
chat=NA
etahat=NA
Chilow=NA
Chimed=NA
try(chat<-estims$par[1],silent=T)
try(etahat<-estims$par[2],silent=T)
try(Chilow<-estims$chiCIs[1],silent=T)
try(Chimed<-estims$chi,silent=T)
#Loop for asymptotic dependence
if (!is.na(Chilow) & (Chilow<0.05 & etahat<0.75| etahat<0.6)){
print("AI")
bet=beta
m1= 1- (wqxFrechet/(wqxFrechet+wqyFrechet))^bet
m2<-1- (wqyFrechet/(wqxFrechet+wqyFrechet))^bet
eta1<-m1*etahat + (1-m1)
eta2<-m2*etahat + (1-m2)
projx<-s^(eta1)*wqxFrechet
projy<-s^(eta2)*wqyFrechet
}else{
projx<-s*wqxFrechet
projy<-s*wqyFrechet}
projbackx<-exp(-(1/projx))
projbacky<-exp(-(1/projy))
objx<-approx(px,mar1, xout = projbackx, method = "linear",yleft = min(mar1),yright = max(mar1), rule = 1)$y
objy<-approx(py,mar2, xout = projbacky, method = "linear",yleft = min(mar2),yright = max(mar2), rule = 1)$y
wqobj<-cbind(objx, objy)
if(interh=="casc"){
pobj<-c(seq(0.00000005,0.00005,by=0.0000001),seq(0.00002,pbas/5,by=0.00005))
s=pbas/pobj
wqobjf<-c()
for (sl in 1:length(s)){
if (etahat<0.85& Chilow<0.02){
print("AI")
beta=200
m1= 1- (wqxFrechet/(wqxFrechet+wqyFrechet))^beta
m2<-1- (wqyFrechet/(wqxFrechet+wqyFrechet))^beta
eta1<-m1*etahat + (1-m1)
eta2<-m2*etahat + (1-m2)
projx<-s[sl]^(eta1)*wqxFrechet
projy<-s[sl]^(eta2)*wqyFrechet
}else{
# plot(xFrechet,yFrechet)
projx<-s[sl]*wqxFrechet
projy<-s[sl]*wqyFrechet}
projbackx<-exp(-(1/projx))
projbacky<-exp(-(1/projy))
objx<-approx(px,mar1, xout = projbackx, method = "linear",yleft = min(mar1),yright = max(mar1), rule = 1)$y
objy<-approx(py,mar2, xout = projbacky, method = "linear",yleft = min(mar2),yright = max(mar2), rule = 1)$y
wqobj<-cbind(objx, objy)
wqobj<-removeNA(wqobj)
wqobj<-data.frame(wqobj)
wqobj[,1]<-jitter(wqobj[,1])
xlt=seq(min(wqobj[,1]),max(wqobj[,1])-0.1,length.out = 120)
xlto=seq(min(wq0ri[,1]),max(wq0ri[,1])-0.1,length.out = 120)
if(length(wqobj[,1])<102){
repeat{
mirror<-wqobj[c(length(wqobj[,1]):1),]
wqobj<-rbind(wqobj,mirror)
if(length(wqobj[,1])>=102) break
}
wqobj<-round(wqobj,8)
wqobj<-wqobj[order(wqobj[,1],-wqobj[,2]),]
wqobj[,1]<-jitter(wqobj[,1])
}
ltl<-digit.curves.p(start=wqobj[1,], curve=as.matrix(wqobj), nPoints=98, closed = FALSE)
ltl1<-ltl
ltl2<-ltl
if (pobj[sl]>0.0000001){
gridx<-(seq(min(ltl[,1],na.rm=T),max(mar1),length.out=100))
gridy<-(seq(min(ltl[,2],na.rm=T),max(mar2),length.out=100))
ltl1[,1]<-approx(ltl[,1], ltl[,2], xout = gridx, method = "linear", rule = 1)$x
ltl1[,2]<-approx(ltl[,1], ltl[,2], xout = gridx, method = "linear", rule = 1)$y
ltl2[,1]<-approx(ltl[,2], ltl[,1], xout = gridy, method = "linear", rule = 1)$y
ltl2[,2]<-approx(ltl[,2], ltl[,1], xout = gridy, method = "linear", rule = 1)$x
}
ltl1<-data.frame(ltl1,rep(pobj[sl],100),rep(sl,100))
ltl2<-data.frame(ltl2,rep(pobj[sl],100),rep(sl,100))
wqobjf<-rbind(wqobjf,ltl1,ltl2)
}
plot(wqobjf[,1],wqobjf[,2],col=wqobjf[,4])
tg=50
gridx<-seq(min(wqobjf[,1],na.rm=T),max(mar1),length.out=tg)
gridy<-seq(min(wqobjf[,2],na.rm=T),max(mar2),length.out=tg)
pxg<-approx(mar1, px, xout = gridx, method = "linear",yleft = min(px),yright = max(px), rule = 1)$y
pyg<-approx(mar2, py, xout = gridy, method = "linear",yleft = min(py),yright = max(py), rule = 1)$y
matjt<-matrix(ncol=tg,nrow=tg)
for (k in 1:(length(pxg)-1)){
colx<-which(wqobjf[,1]>gridx[k] & wqobjf[,1]<=gridx[k+1])
for (j in 1:(length(pyg)-1)){
coly<-wqobjf[colx,3][which(wqobjf[colx,2]>gridy[j] & wqobjf[colx,2]<=gridy[j+1])]
if(length(coly)==0){matjt[j,k]=NA}else{
matjt[k,j]=mean(coly,na.rm=T)/(1-pxg[k])}
}
}
for (k in 1:(length(pxg)-1)){
colx<-which(wqobjf[,2]>gridy[k] & wqobjf[,2]<=gridy[k+1])
for (j in 1:(length(pyg)-1)){
coly<-wqobjf[colx,3][which(wqobjf[colx,1]>gridx[j] & wqobjf[colx,1]<=gridx[j+1])]
if(length(coly)==0){matjt[j,k]=matjt[j,k]}else{
matjt[j,k]=mean(coly,na.rm=T)/(1-pxg[j])}
}
}
grid <- expand.grid(lon=gridx, lat=gridy)
for (nap in 1: length(pxg)){ matjt[,nap]<-na.approx(matjt[,nap],maxgap = 5,na.rm=F)}
for (nap in 1: length(pxg)){ matjt[nap,]<-na.approx(matjt[nap,],maxgap = 5,na.rm=F)}
levelplot(matjt ~ lon * lat, data=grid, cuts=20, pretty=T,contour=T)
contour(gridx,gridy,matjt,levels=0.001)
sh<-contourLines(gridx,gridy,matjt,levels=upobj)
obx<-c()
oby<-c()
for (ssh in 1:length(sh)){
obx<-c(obx,sh[[ssh]]$x)
oby<-c(oby,sh[[ssh]]$y)
}
plot(obx,oby)
wqobj<-data.frame(obx,oby)
}
res<-list(levelcurve=wqobj,etaJT=etahat,chiJT= Chimed,wq0ri=wq0ri)
}
jtres<-JT.KDE.ap(u2=fire01meantemp,pb=0.01,pobj=upobj,beta=100,vtau=vtau,devplot=F,mar1=u1b,mar2=u2b,px=pxfp,py=pyfp,interh=interh)
